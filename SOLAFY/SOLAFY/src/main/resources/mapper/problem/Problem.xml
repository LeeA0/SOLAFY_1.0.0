<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.solafy.mapper.problem.ProblemMapper">
	<!--
	@FileName : Problem.xml
	@Project : SOLAFY
	@Date : 2020. 12. 15.
	@작성자 : Lee Ayoung
	
	@변경이력 :
	@프로그램 설명 : Problem SQL 
	-->

	<!-- 문제 전체 검색 -->
	<select id="selectProblemList" resultType="ProblemDto">
		select p.problemNo, p.title, u.nickname, p.regiTime
		from problem p join userinfo u
		on p.uid = u.uid
		where p.flag = 1
	</select>
	
	<!-- 문제번호를 받아와서 카테고리번호가 같은(소분류가 같은)문제들 중 랜덤하게 10개를 뽑은 리스트 반환 (문제 추천용)-->
	<select id="selectRecommendProblemList" parameterType="int" resultType="ProblemDto">
		select problemNo, title
		from problem
		where flag = 1 and problemNo != #{problemNo} and categoryNo = (select categoryNo from problem where problemNo=#{problemNo})
		order by rand() limit 10
	</select>

	<!-- 문제의 정보 반환(상세보기 용) -->
	<select id="selectProblem" parameterType="int" resultType="ProblemDto">
		select p.problemNo, p.multipleChoice, p.title, u.nickname, p.contents, p.categoryNo, p.type, p.regiTime
		from problem p join userinfo u
		on p.uid = u.uid
		where p.problemNo = #{problemNo}
	</select>
	
	<!-- 문제의 소분류 카테고리 반환(상세보기 용) -->
	<select id="selectCategorySmall" parameterType="int" resultType="CategorySmallDto">
		select categoryNo, categoryName
		from categorysmall
		where categoryNo = #{categorySmallNo}
	</select>
	
	<!-- 문제의 중분류 카테고리 반환(상세보기 용) -->
	<select id="selectCategoryMedium" parameterType="int" resultType="CategoryMediumDto">
		select categoryNo, categoryName
		from categorymedium
		where categoryNo = #{categoryMediumNo}
	</select>
	
	<!-- 문제의 대분류 카테고리 반환(상세보기 용) -->
	<select id="selectCategoryLarge" parameterType="int" resultType="CategoryLargeDto">
		select categoryNo, categoryName
		from categorylarge
		where categoryNo = #{categoryLargeNo}
	</select>
	
	<!-- 문제의 해시태그 반환 : hashtagmapping테이블에서 문제 번호를 받아 반환 -->
	<select id="selectHashTagList" parameterType="int" resultType="HashTagDto">
		select h.hashTagNo, h.hashTag
		from hashtag h join hashtagmapping m
		on h.hashTagNo = m.hashTagNo
		where m.problemNo = #{problemNo}
	</select>
	
	<!-- 해시태그번호로 문제 검색 -->
	<select id="selectProblemByHashTag" parameterType="int" resultType="ProblemDto">
		select p.problemNo, p.title, u.nickname, p.regiTime
		from hashtagmapping m join problem p join userinfo u
		on m.problemNo = p.problemNo and p.uid = u.uid
		where m.hashTagNo = #{hashTagNo} and p.flag = 1
	</select>
	
	<!-- 소분류 카테고리를 이용한 문제 검색 -->
	<select id="selectProblemByCategorySmall" parameterType="String" resultType="ProblemDto">
		select p.problemNo, p.title, u.nickname, p.regiTime
		from problem p join userinfo u
		on p.uid = u.uid
		where p.categoryNo = #{categoryNo} and p.flag = 1
	</select>
	
	<!-- 중분류 카테고리를 이용한 문제 검색 -->
	<select id="selectProblemByCategoryMedium" parameterType="String" resultType="ProblemDto">
		select p.problemNo, p.title, u.nickname, p.regiTime
		from problem p join userinfo u
		on p.uid = u.uid
		where p.categoryNo like concat(#{categoryLargeMediumNo}, '%') and p.flag = 1
	</select>
	
	<!-- 대분류 카테고리를 이용한 문제 검색 -->
	<select id="selectProblemByCategoryLarge" parameterType="String" resultType="ProblemDto">
		select p.problemNo, p.title, u.nickname, p.regiTime
		from problem p join userinfo u
		on p.uid = u.uid
		where p.categoryNo like concat(#{categoryLargeNo}, '%') and p.flag = 1
	</select>
	
	<!-- 문제이름(일부)으로 검색 -->
	<select id="selectProblemByName" parameterType="String" resultType="ProblemDto">
		select p.problemNo, p.title, u.nickname, p.regiTime
		from problem p join userinfo u
		on p.uid = u.uid
		where p.title like concat('%', #{title}, '%') and p.flag = 1
	</select>
	
	<!-- 문제번호로 검색 -->
	<select id="selectProblemByProblemNo" parameterType="int" resultType="ProblemDto">
		select p.problemNo, p.title, u.nickname, p.regiTime
		from problem p join userinfo u
		on p.uid = u.uid
		where p.problemNo = #{problemNo} and p.flag = 1
	</select>
	
	<!-- 유저닉네임으로 검색 -->
	<select id="selectProblemByUserNickname" parameterType="String" resultType="ProblemDto">
		select p.problemNo, p.title, u.nickname, p.regiTime
		from problem p join userinfo u
		on p.uid = u.uid
		where u.nickname = #{nickname} and p.flag = 1
	</select>
	
	<!-- 문제 등록 -->
	<!-- useGeneratedKeys="true" keyProperty="값을 받아올컬럼명"을 써주면 insert문 실행 후 ProblemDto의 해당 컬럼에 값을 넣어준다 -->
	<insert id="createProblem" parameterType="ProblemDto" useGeneratedKeys="true" keyProperty="problemNo">
		insert into problem (multipleChoice, title, uid, contents, categoryNo, type, flag)
		values(#{multipleChoice}, #{title}, #{uid},#{contents},#{categoryNo},#{type},0)
	</insert>
	
	<!-- 문제와 해시태그를 연결 -->
	<insert id="createHashTagMapping" parameterType="int">
		insert into hashtagmapping (problemNo,hashTagNo)
		values (#{problemNo}, #{hashTagNo})
	</insert>
	
	<!-- 문제와 문제집을 연결 -->
	<insert id="createProblemSetMapping" parameterType="int">
		INSERT INTO problemsetmapping (problemSetNo, problemNo)
		VALUES (#{problemSetNo},#{problemNo})
	</insert>
	
	<!-- 문제의 플래그를 임시저장 상태에서 저장으로 변경 -->
	<update id="updateProblemFlag" parameterType="String">
		update problem
		set flag = 1
		where uid = #{uid} and flag = 0	
	</update>
	
	<!-- 플래그가 임시저장 상태인 문제를 삭제 -->
	<delete id="deleteProblemFlag" parameterType="String">
		delete from problem
		where uid = #{uid} and flag = 0
	</delete>
	
	<!-- 문제 수정 -->
	<update id="updateProblem" parameterType="ProblemDto">
		update problem
		set multipleChoice = #{multipleChoice},title=#{title},contents=#{contents},categoryNo=#{categoryNo},type=#{type}
		where problemNo = #{problemNo}	
	</update>
	
	<!-- 문제와 해시태그의 연결 전체 해제-->
	<delete id="deleteHashTagMappingByProblemNo" parameterType="int">
		delete from hashtagmapping
		where problemNo = #{problemNo}
	</delete>
	
	<!-- 문제 삭제 -->
	<delete id="deleteProblem" parameterType="int">
		delete from problem
		where problemNo = #{problemNo}
	</delete>
</mapper>